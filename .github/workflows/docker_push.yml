name: Docker

on:
 workflow_dispatch:
   inputs:
     DockerImageName:
       description: 'Docker image name'
       default: 'devsecops'
       required: true 
     tag:
       description: Docker tag
       default: latest
       required: true
jobs:
  Snyk-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/maven@master
      continue-on-error: true 
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=low
    - run: |
         npm install snyk -g
         npm install snyk-to-html -g
         snyk auth ${{ secrets.SNYK_TOKEN }}
         snyk test --json-file-output=SnykTestReport.json
      continue-on-error: true
    - run: snyk-to-html -i SnykTestReport.json -o SnykTestReport.html
         
    - run: mkdir SnykTestReport && cp SnykTestReport.html SnykTestReport
    - uses: actions/upload-artifact@v3 
      with:
        name: Snyk Test
        path: SnykTestReport
          
  Snyk-Code-Scanning:
    needs: Snyk-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/maven@master
      continue-on-error: true 
      env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
         args: --sarif-file-output=snyk.sarif
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
        
  Build-Docker-Images:
    runs-on: ubuntu-latest
    needs: Snyk-Code-Scanning
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      continue-on-error: true     
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
          mvn -B package --file pom.xml
          ls -la
          cd target
          ls -la
          
    - run: mkdir Artifact-Package && cp target/*.jar Artifact-Package
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: Artifact-Package  
     
    - name: Docker image build
      run: |
          docker build -t ${{github.event.inputs.DockerImageName}}:${{github.event.inputs.tag}} .
          docker images
    - name: Snyk Login
      run: |
           npm install snyk -g
           snyk auth ${{ secrets.SNYK_TOKEN }}
           snyk container test ${{github.event.inputs.DockerImageName}}:${{github.event.inputs.tag}} --json-file-output=SnykDockerImage.json
      continue-on-error: true   
    - name: Generate Snyk Docker Image json report into Html format
      run: |
           npm install snyk-to-html -g
           snyk-to-html -i SnykDockerImage.json -o SnykDockerImage.html
           ls -la
    - run: mkdir DockerScan && cp SnykDockerImage.html DockerScan      
    - uses: actions/upload-artifact@v3 
      with:
        name: Docker report
        path: DockerScan
        
  Docker:
    runs-on: ubuntu-latest 
    needs: Build-Docker-Images
    permissions: 
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1 

      - name: Log in to GHCR
        env:
            REGISTRY: ghcr.io 
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
            registry: ${{ env.REGISTRY }} 
            username: ${{ github.actor }}
            password: ${{ secrets.CR_PAT }} 

      - name: Login to GCR
        env:
          PROJECT_ID: nitor-tes 
        uses: google-github-actions/setup-gcloud@v0.3.0 
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }} 
          project_id: ${{ env.PROJECT_ID }} 
          export_default_credentials: true
          
      - name: Build Docker Image
        env:
          IMAGE_NAME: ${{github.event.inputs.DockerImageName}}:${{github.event.inputs.tag}}
          PROJECT_ID: nitor-tes
        run: docker build -t ${{github.event.inputs.DockerImageName}}:${{github.event.inputs.tag}} . 
        
      - name: Configure Docker Client
        run:  |-
          gcloud auth configure-docker --quiet 
        
      - name: Push Docker Image to Container Registry GCR
        env: 
          IMAGE_NAME: ${{github.event.inputs.DockerImageName}}:${{github.event.inputs.tag}}
          PROJECT_ID: nitor-tes

        run: |-
          docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest 
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest 
          
      - name: Extract metadata (tags, labels) for Docker GHCR
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} #create ghcr image format within as id called meta

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc #push docker image to ghcr
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
